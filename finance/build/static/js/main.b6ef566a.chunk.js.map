{"version":3,"sources":["components/Income_Split/useIncomeSplit.js","components/Inputs/InputNumber.js","components/Income_Split/EditableSplit.js","components/Income_Split/Splits.js","components/Charts/PieChart.js","utils/utilFunctions.js","components/Income_Split/IncomeSplit.js","views/Homepage/Homepage.js","components/Charts/BarChart.js","components/Compounding/useCompounding.js","components/Forms/CompoundingForm.js","components/Compounding/CompoundingInterest.js","views/Compounding_Interest/CompoundingPage.js","App.js","reportWebVitals.js","theme/theme.js","theme/Input.js","index.js"],"names":["useIncomeSplit","useState","isPercentage","tracker","hasRecalculate","option","state","setState","income","setIncome","initial_curr_split","curr_split","setCurrSplit","useReducer","reducer","initialSplit","splits","setSplits","initialPieChart","config","setConfig","id_split","useRef","useEffect","change_income","value","add","name","prevState","labels","datasets","data","parseInt","percentage","amount","type","id","current","edit","info","newTracker","index","findIndex","split","remove","dataset","splice","console","log","recalculate","newData","forEach","push","change","color","action","newState","filter","object","label","backgroundColor","hoverOffset","InputNumber","placeholder","props","EditableSplit","actions","isEqual","isLess","bar","setInfo","isEditing","setIsEditing","difference","direction","onChange","e","target","capitalize","min","icon","Check","onClick","newPercentage","Close","alignItems","Minus","variant","fontSize","fontWeight","get_amount","get_percentage","Edit","str","lower","toLowerCase","charAt","toUpperCase","slice","portion","total","toFixed","Splits","map","key","PieChart","w","formatter","money","Intl","NumberFormat","style","currency","format","IncomeSplit","defaultValue","maxW","templateColumns","colSpan","base","md","my","precision","sm","max","colorScheme","isDisabled","Homepage","p","BarChart","options","initial_config","plugins","tooltip","intersect","position","callbacks","title","context","formattedValue","scales","y","ticks","callback","values","display","scale","length","xAxis","text","useCompounding","initialInfo","final_amount","setFinalAmount","P","initial","A","recurrent","r","rate","n","compounding_frequency","frequency","years","final","parseFloat","calculate_compound_amount","calculate_recurrent_amount","range","invested","compounded","i","calculate_invested_amount","borderColor","modify","attribute","anually","semianually","quarterly","monthly","t","newRate","n_compounds","start","end","Array","fill","_","idx","CompoundingForm","helper","isRequired","align","spacing","FormField","children","m","CompoundingInterest","size","CompoundingPage","App","h","to","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","theme","extendTheme","components","Input","baseStyle","sizes","variants","defaultProps","NumberInput","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b6ef566a.chunk.js","sourcesContent":["import { useReducer, useState, useRef, useEffect } from \"react\"\n\nconst useIncomeSplit = () => {\n    const [ state, setState ] = useState({isPercentage: true, tracker:0, hasRecalculate:false, option:'percentage'})\n    const [ income, setIncome ] = useState(0)\n    const [ curr_split, setCurrSplit ] = useState(initial_curr_split)\n    const [ splits, setSplits ] = useReducer(reducer, initialSplit)\n    const [ config, setConfig ] = useState(initialPieChart)\n\n    const id_split = useRef(0)\n\n    useEffect(() => {\n    \n        setState(state => ({...state, hasRecalculate:true}))\n        \n    }, [income])\n\n    const change_income = (value) => {\n        setState(state => ({...state, income:value}))\n        setIncome(value)\n    }\n\n    const change = (option) =>{\n        setSplits(initialSplit)\n        setConfig(state => ({\n            labels:[],\n            datasets:[\n                state.datasets[0] = {\n                    ...state.datasets[0],\n                    data:[]\n                }\n            ]\n        }))\n        if (option === 'percentage'){\n            setState(state => ({...state, option:option, tracker:0, isPercentage:true}))\n        }\n        else{\n            setState(state => ({...state, option:option, tracker:0, isPercentage:false}))\n        }\n\n    }\n\n    const add = () => {\n        if (curr_split.name !== '' && curr_split[state.option] !== ''){\n            // Add data in pie chart\n            setConfig(prevState => ({\n                labels: [...prevState.labels, curr_split.name],\n                datasets: [\n                    prevState.datasets[0] = {\n                        ...prevState.datasets[0],\n                        data: [...prevState.datasets[0].data, state.isPercentage ? income * (parseInt(curr_split.percentage)/100) : 100 * (parseInt(curr_split.amount)/income)],\n                    }\n                ]\n            }))\n            setState(prevState => ({...prevState, tracker: prevState.tracker + (state.isPercentage ? parseInt(curr_split.percentage) : parseInt(curr_split.amount)) }))\n            // setPercentage(prev => prev += parseInt(curr_split.percentage))\n            setSplits({type:'add', id:id_split.current, value:curr_split})  // Add split to render list\n            setCurrSplit(initial_curr_split)    // Resets the form\n            id_split.current += 1 \n        }\n    }\n\n    const edit = (id, info, newTracker) => {\n        let index = splits.findIndex(split => split.id === id)\n        setConfig(prevState => {\n            let labels = prevState.labels\n            let datasets = prevState.datasets[0]\n            labels[index] = info.name\n            datasets.data[index] = state.isPercentage ? income * (parseInt(info.percentage)/100) : (info.amount/income) * 100\n            return { labels, datasets:[datasets] }\n        })\n        setState(state => ({...state, tracker:newTracker}))\n        // setPercentage(newPercentage)\n        setSplits({type:'edit', value: info, id:id})\n    }\n\n    const remove = (id) => {\n        let index = splits.findIndex(split => split.id === id)\n        setConfig(state => {\n            let labels = [...state.labels]\n            const datasets = [...state.datasets]\n            const dataset = {...datasets[0]}\n            const data = [...dataset.data]\n            labels.splice(index, 1)\n            data.splice(index, 1)\n            console.log(data)\n            return {labels, datasets:[\n                {\n                    ...dataset,\n                    data: [...data]\n                }\n            ]}\n        })\n        setSplits({'type':'remove', 'id': id})\n    }\n\n    const recalculate = () => {\n        setState(state => ({...state, hasRecalculate:false}))\n        \n        let newData = []\n        splits.forEach(split => {\n            state.isPercentage\n            ?   newData.push(income * (parseInt(split.percentage)/100))\n            :   newData.push(100 * (parseInt(split.amount)/income))\n        })\n        setConfig(state => ({\n            ...state, \n            datasets: [\n                state.datasets[0] = {\n                    ...state.datasets[0],\n                    data: [...newData]\n                }\n            ]\n        }))\n    }\n    return { income, change_income, splits, add, edit, remove, config, curr_split, setCurrSplit, recalculate, state, change }\n}\n\nexport default useIncomeSplit\n\nconst initial_curr_split = {\n    id: 0,\n    name:'',\n    percentage:'',\n    amount:'',\n    color:''\n}\n\nconst initialSplit = []\n\nconst reducer = (state, action) => {\n    switch(action.type){\n\n        case 'add':\n            return [\n                ...state,\n                {\n                    ...action.value,\n                    id: action.id\n                }\n            ]\n        case 'remove':\n            var newState = state.filter(split => split.id !== action.id)\n            return [\n                ...newState\n            ]\n\n        case 'edit':\n            let object = state.filter(split => split.id === action.id)[0]\n            object.name = action.value.name\n            object.percentage = action.value.percentage\n            object.amount = action.value.amount\n            return [\n                ...state\n            ]\n\n        default:\n            return initialSplit\n    }\n}\n\nconst initialPieChart = {\n    labels:[],\n    datasets:[{\n        label:'Income Distribution',\n        data: [],\n        backgroundColor:[\n            \"#ffd700\",\n            \"#ffb14e\",\n            \"#fa8775\",\n            \"#ea5f94\",\n            \"#cd34b5\",\n            \"#9d02d7\",\n            \"#0000ff\"\n    ],\n        hoverOffset:5\n    }],\n}\n// 'rgba(255, 99, 132, 0.2)',\n//             'rgba(54, 162, 235, 0.2)',\n//             'rgba(255, 206, 86, 0.2)',\n//             'rgba(75, 192, 192, 0.2)',\n//             'rgba(153, 102, 255, 0.2)',\n            // 'rgba(255, 159, 64, 0.2)',","import React from 'react'\nimport { NumberInput,NumberInputField,NumberInputStepper,NumberIncrementStepper,NumberDecrementStepper } from \"@chakra-ui/react\"\n\nfunction InputNumber({placeholder, ...props}) {\n    return (\n        <NumberInput {...props} >\n            <NumberInputField placeholder={placeholder}/>\n            <NumberInputStepper>\n                <NumberIncrementStepper />\n                <NumberDecrementStepper />\n            </NumberInputStepper>\n        </NumberInput>\n    )\n}\n\nexport default InputNumber\n","import React, { useState } from 'react'\nimport { Input, Stack, IconButton, Text, ButtonGroup } from '@chakra-ui/react'\nimport { CloseIcon, EditIcon, CheckIcon, MinusIcon } from '@chakra-ui/icons'\nimport InputNumber from '../Inputs/InputNumber'\n\nfunction EditableSplit({ split, actions, state }) {\n    const isEqual = state.isPercentage ? state.tracker === 100 : state.tracker === parseInt(state.income)\n    const isLess = state.isPercentage ? state.tracker < 100 : state.tracker < parseInt(state.income)\n    const bar = state.isPercentage ? 100 : state.income\n    const { edit, remove } = actions\n    const [ info, setInfo ] = useState({...split})\n    const [ isEditing, setIsEditing ] = useState(false)\n\n    let difference =  parseInt(info[state.option]) - parseInt(split[state.option])\n\n    const submit = () => {\n        if (isEqual && info[state.option] > split[state.option]){\n            // do nothing\n            console.log('Do Nothing 1')\n        }\n        else if ( isLess && difference + state.tracker > bar){\n            // do nothing\n            console.log('Do Nothing 2')\n        }\n        else if ( isLess && difference + state.tracker <= bar ){\n            // Accept change\n            let newPercentage = state.tracker + difference\n            edit(split.id, info, newPercentage)\n            setIsEditing(false)\n        }\n        else if ( isEqual && info[state.option] < split[state.option]){\n            // Accept change\n            let newPercentage = state.tracker + difference\n            edit(split.id, info, newPercentage)\n            setIsEditing(false)\n        }\n        else{\n            console.log('Nothing')\n            console.log(isEqual)\n        }\n    }\n\n    const cancel = () => {\n        setIsEditing(false)\n        setInfo({...split})\n    }\n\n    const handle_remove = () => remove(split.id)\n\n    if (isEditing){\n        return(\n            <Stack direction='row'>\n                <Input \n                    placeholder='Name' \n                    value={info.name} \n                    onChange={e => setInfo(state => ({...state, name:e.target.value}))}\n                />\n\n                <InputNumber \n                    placeholder={capitalize(state.option)} \n                    value={info[state.option]} \n                    onChange={value => setInfo(prevState => ({...prevState, [state.option]:value}))}\n                    min={0}\n                />\n\n                <ButtonGroup>\n                    <IconButton icon={<CheckIcon />} onClick={submit} />\n                    <IconButton icon={<CloseIcon />} onClick={cancel} />\n                </ButtonGroup>\n\n            </Stack>\n        )\n    }\n    else{\n        return (\n            <Stack direction='row' alignItems='center'>\n                <IconButton icon={<MinusIcon />} variant='ghost' onClick={handle_remove} />\n                \n                <Text fontSize='xl' fontWeight='bold' >\n                    {\n                        state.isPercentage\n                        ? `${split.percentage}% ($${get_amount(split.percentage, state.income)})  ${split.name}`\n                        : `$${split.amount} (${get_percentage(split.amount, state.income)}%) ${split.name}`\n                    }\n                </Text>\n                \n                <IconButton onClick={() => setIsEditing(true)} icon={<EditIcon />} variant='ghost' />\n            </Stack>\n        )\n    }\n    \n}\n\nexport default EditableSplit\n\nconst capitalize = (str) => {\n    const lower = str.toLowerCase()\n    return str.charAt(0).toUpperCase() + lower.slice(1)\n}\n\nconst get_percentage = (portion, total) => {\n    return (100 * (portion/total)).toFixed(2)\n}\n\nconst get_amount = (percentage, total) => {\n    return ((percentage/100) * total).toFixed(2)\n}","import React from 'react'\nimport { Box } from '@chakra-ui/react'\nimport EditableSplit from './EditableSplit'\n\n\nfunction Splits({ splits, actions, state }) {\n\n    return (\n        <Box>\n\n            {\n                splits.map((split, key) => (\n                    <EditableSplit key={key} split={split} actions={actions} state={state} />\n                ))\n            }\n\n        </Box>\n    )\n}\n\nexport default Splits","import React from 'react'\nimport { Box, Center } from '@chakra-ui/layout';\nimport { Pie } from 'react-chartjs-2';\n\nfunction PieChart({config}) {\n\n    return (\n        <Center>\n            <Box w={400}>\n                <Pie  data={config}/>\n            </Box>\n        </Center>\n    )\n}\n\nexport default PieChart\n","export const formatter = (money) => { \n    let formater = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    // These options are needed to round to whole numbers if that's what you want.\n    //minimumFractionDigits: 0, // (this suffices for whole numbers, but will print 2500.10 as $2,500.1)\n    //maximumFractionDigits: 0, // (causes 2500.99 to be printed as $2,501)\n  })\n  return formater.format(money)\n  ;}","import React from 'react'\nimport { Heading, Button, Flex, Spacer, Stack, Input, Select, Box, Grid, GridItem } from '@chakra-ui/react'\nimport useIncomeSplit from './useIncomeSplit'\nimport Splits from './Splits'\nimport InputNumber from '../Inputs/InputNumber'\nimport PieChart from '../Charts/PieChart'\nimport { formatter } from '../../utils/utilFunctions'\n\nfunction IncomeSplit() {\n\n    const { income, change_income, splits, add, edit, remove, config, curr_split, setCurrSplit, recalculate, state, change } = useIncomeSplit()\n\n    return (\n        <Box>\n\n            <Heading>Income Split</Heading>\n            \n            <Flex>\n                <Heading>{ formatter(income) }</Heading>\n\n                <Spacer />\n\n                <Select defaultValue='percentage' maxW={150} onChange={(e) => change(e.target.value)}>\n                    <option value='percentage'>Percentage</option>\n                    <option value='amount'>Amount</option>\n                </Select>\n\n            </Flex>\n\n            <Grid templateColumns=\"repeat(6, 1fr)\" >\n                <GridItem colSpan={{base:6, md:2}}>\n                    <Splits splits={splits} actions={{ edit, remove }} state={state} /> \n                </GridItem>\n                <GridItem colSpan={{base:6, md:4}}>\n                    <PieChart config={config} /> \n                </GridItem>\n            </Grid>\n\n            {/* Form for adding splits */}\n            <Box>\n                <Flex direction='row' my={2} >\n                \n                    <InputNumber placeholder='Income' onChange={value => change_income(value)} precision={2} maxW={500} />\n\n                    <Spacer />\n\n                    {\n                        state.hasRecalculate\n                        ?<Button onClick={recalculate} >Recalculate</Button>\n                        : null\n                    }\n                    \n                </Flex>\n\n                <Stack direction={{base:'column', sm:'row'}}>\n                    \n                    <Input\n                        placeholder='Name'\n                        value={curr_split.name}\n                        onChange={e => setCurrSplit(state => ({...state, name:e.target.value}))}\n                    />\n                    \n                    <InputNumber \n                        placeholder={capitalize(state.option)} \n                        value={curr_split[state.option]}\n                        onChange={value => setCurrSplit(prevState => ({...prevState, [state.option]:value}))}\n                        min={0}\n                        max={state.isPercentage ? 100 - state.tracker : income - state.tracker}\n                    />\n\n                    <Button variant='outline' colorScheme='green' onClick={add} isDisabled={state.isPercentage ? state.tracker === 100 : state.tracker === parseInt(state.income)}>\n                        Add Split\n                    </Button>\n\n                </Stack>\n            </Box>\n            \n\n        </Box>\n    )\n}\n\nexport default IncomeSplit\nconst capitalize = (str) => {\n    const lower = str.toLowerCase()\n    return str.charAt(0).toUpperCase() + lower.slice(1)\n}","import React from 'react'\nimport { Box } from '@chakra-ui/react'\nimport IncomeSplit from '../../components/Income_Split/IncomeSplit'\n\nfunction Homepage() {\n    return (\n        <Box p={3}>\n            \n            <IncomeSplit />\n\n        </Box>\n    )\n}\n\nexport default Homepage\n","import React from 'react'\nimport { Box, Center } from '@chakra-ui/layout';\nimport { Line } from 'react-chartjs-2';\n\nfunction BarChart({config}) {\n    return (\n        <Center>\n            <Box w={400}>\n                <Line  data={config} options={options}  />\n            </Box>\n        </Center>\n    )\n}\n\nexport default BarChart\n\nexport const initial_config = {\n    labels: [],\n    datasets: [],\n}\n\nconst options = {\n    plugins: {\n        tooltip: {\n            intersect:false,\n            position:'nearest',\n            callbacks:{\n                title: function(context) {\n                    let label = context[0].label || ''\n                    let newLabel = 'Year ' + label\n                    return newLabel;\n                },\n                label: (context) => {\n                    return context.dataset.label + ': $' + context.formattedValue\n                }\n            }\n        }\n    },\n    scales: {\n        y: {\n            ticks: {\n                // Include a dollar sign in the ticks\n                callback: function(value, index, values) {\n                    return '$' + value;\n                }\n            },\n            display:(context) => {\n                if (context.scale.ticks.length > 0){\n                    return true\n                }\n                return false\n            }\n        },\n        xAxis:{\n            title:{\n                display:true,\n                text:'Years'\n            },\n            display: (context) => {\n                if (context.scale.ticks.length > 0){\n                    return true\n                }\n                return false\n            }\n        }\n    }\n}\n","import { useReducer, useEffect, useState } from \"react\"\nimport { initial_config } from \"../Charts/BarChart\"\n\nconst useCompounding = () => {\n    const [ info, setInfo ] = useReducer(reducer, initialInfo)\n    const [ config, setConfig ] = useState(initial_config)\n    const [ final_amount, setFinalAmount ] = useState(0)\n\n    useEffect(() => {\n\n        let P = info.initial\n        let A = info.recurrent\n        let r = info.rate / 100\n        let n = compounding_frequency[info.frequency]\n        let y = info.years\n        let final = parseFloat(calculate_compound_amount(P,r,n, y)) + parseFloat(calculate_recurrent_amount(A, r,n ,y))\n        let bar = final ? final : 0\n        // console.log(parseFloat(calculate_invested_amount(P, y, A)))\n        setFinalAmount(bar)\n\n        if (final_amount !== 0) {\n            let labels = range(1, info.years)\n            let invested = []\n            let compounded = []\n            for (let i = 1; i <= info.years; i++){\n                invested.push(calculate_invested_amount(P, i, A))\n                compounded.push(parseFloat(calculate_compound_amount(P,r,n, i)) + parseFloat(calculate_recurrent_amount(A, r,n ,i)))\n            }\n\n            setConfig({\n                labels:labels,\n                datasets: [\n                    {\n                        label:'Compounded',\n                        data:compounded,\n                        backgroundColor:['rgba(255, 99, 132, 0.2)',],\n                        borderColor:['rgba(255, 99, 132, 0.2)',]\n                    },\n                    {\n                        label:'Total Contributed',\n                        data:invested,\n                        backgroundColor:['rgba(255, 159, 64, 0.2)',],\n                        borderColor:['rgba(255, 159, 64, 0.2)',]\n                    }\n                ]\n            })\n        }\n\n    }, [info, final_amount])\n\n    const modify = (attribute, value) => setInfo({[attribute]:value})\n\n    return { info, modify, config, final_amount }\n}\n\nexport default useCompounding\n\nconst initialInfo = {\n    initial: '',\n    recurrent:'',\n    rate: '',\n    years: 20,\n    total: '', \n    frequency:'anually'\n}\n\nconst compounding_frequency = {\n    anually: 1,\n    semianually:2,\n    quarterly:4,\n    monthly:12\n}\n\nconst reducer = (state, action) => {\n    return {\n        ...state,\n        ...action\n    }\n}\n\n\nconst calculate_compound_amount = (P, r, n, t) => {\n    let A = P * (( 1 + (r/n)) ** (n*t))\n    return A.toFixed(2)\n}\n\nconst calculate_recurrent_amount = (A, rate, frequency ,years) => {\n    // console.log(A)\n    // console.log(rate)\n    // console.log(years)\n    let newRate = rate/frequency\n    let n_compounds = years * frequency\n    let recurrent_sum = A * (12/frequency)\n\n    let fututre_amount = recurrent_sum * ((((1 + newRate) ** (n_compounds)) - 1) / newRate)\n    return fututre_amount.toFixed(2)\n}\n\nconst calculate_invested_amount = (P, years, monthly) => {\n    return parseFloat(P) + (monthly * 12 * years)\n}\n\nconst range = (start, end) => {\n    return Array(end - start + 1).fill().map((_, idx) => start + idx)\n}","import React from 'react'\nimport { FormControl, FormLabel, FormHelperText, Box, Select, Stack } from \"@chakra-ui/react\"\nimport InputNumber from '../Inputs/InputNumber'\n\nfunction CompoundingForm({ info, modify }) {\n    return (\n        <Box>\n            <FormField label='Initial Investment' helper='Initial investment' isRequired={true}>\n                <InputNumber precision={2} placeholder='Initial Investment' min={0} value={info.initial} onChange={value => modify('initial', value)} />\n            </FormField>\n            \n            <FormField label='Monthly contribution' helper='Recurrent contribution each month' isRequired={false}>\n                <InputNumber precision={2} placeholder='Monthly Contribution' min={0} value={info.recurrent} onChange={value => modify('recurrent', value)} />\n            </FormField>\n\n            <Stack direction='row' align='center' spacing={3} >\n                <FormField label='Time (in years)' helper='Length of time in years' isRequired={true}>\n                    <InputNumber placeholder='Time' min={0} value={info.years} onChange={value => modify('years', parseInt(value))} />\n                </FormField>\n\n                <FormField label='Interest Rate' helper='Estimated interest rate' isRequired={true}>\n                    <InputNumber precision={2} placeholder='Interest rate' min={0} value={info.rate} onChange={value => modify('rate', value)} />\n                </FormField>\n            </Stack>\n\n            <FormField label='Frequency' helper='Compounding frequency' isRequired={true}>\n                <Select value={info.frequency} onChange={e => modify('frequency', e.target.value)} >\n                    <option value='anually'>Anually</option>\n                    <option value='semianually'>Semianually</option>\n                    <option value='quarterly'>Quarterly</option>\n                    <option value='monthly'>Monthly</option>\n                </Select>\n            </FormField>\n        </Box>\n    )\n}\n\nexport default CompoundingForm\n\nconst FormField = ({ label, helper, isRequired, children }) => {\n    return (\n        <FormControl isRequired={isRequired} my={2}>\n            <FormLabel m={0}>{label}</FormLabel>\n            { children }\n            <FormHelperText m={0}>{helper}</FormHelperText>\n        </FormControl>\n    )\n}","import React from 'react'\nimport { Box, Heading, Text } from '@chakra-ui/react'\nimport useCompounding from './useCompounding'\nimport CompoundingForm from '../Forms/CompoundingForm'\nimport BarChart from '../Charts/BarChart'\nimport { formatter } from '../../utils/utilFunctions'\n\nfunction CompoundingInterest() {\n\n    const { info, modify, config, final_amount } = useCompounding()\n\n    return (\n        <Box>\n            <Heading>Compounding Effect</Heading>\n\n            <BarChart config={config} />\n            \n            <Text size='lg' >Final amount after {info.years} years:</Text>\n            <Heading size='2xl'>{formatter(final_amount)}</Heading>\n            <CompoundingForm info={info} modify={modify} />\n\n\n        </Box>\n    )\n}\n\nexport default CompoundingInterest\n","import React from 'react'\nimport { Box } from '@chakra-ui/react'\nimport CompoundingInterest from '../../components/Compounding/CompoundingInterest'\n\nfunction CompoundingPage() {\n    return (\n        <Box p={3}>\n            <CompoundingInterest />\n        </Box>\n    )\n}\n\nexport default CompoundingPage\n","import { Box, Center, Heading, ButtonGroup, Button, Divider, Stack } from '@chakra-ui/react';\nimport Homepage from './views/Homepage/Homepage';\nimport CompoundingPage from './views/Compounding_Interest/CompoundingPage';\nimport { Routes, Route, Link } from 'react-router-dom'\nfunction App() {\n  return (\n    <Box h='100vh'>\n\n    <Center m={3} >\n      <Stack direction='column' w='40%'>\n        <Heading align='center'>Finance</Heading>\n        <Divider />\n      </Stack>\n    </Center>\n\n    <Center>\n      <ButtonGroup variant='ghost' size='sm'>\n        <Link to='/'><Button>Split</Button></Link>\n        <Link to='/compounding'><Button>Compounding</Button></Link>\n      </ButtonGroup>\n    </Center>\n    \n    <Routes>\n\n      <Route path='compounding' element={<CompoundingPage />} /> \n    \n      <Route path='/' element={<Homepage />} /> \n    \n    </Routes>\n\n    </Box>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { extendTheme } from \"@chakra-ui/react\";\nimport { Input, NumberInput } from \"./Input\";\n\nexport const theme = extendTheme({\n    components:{\n        Input,\n        NumberInput\n    }\n})","export const Input = {\n    baseStyle: {\n\n    },\n    // Styles for the size variations\n    sizes: {},\n    // Styles for the visual style variations\n    variants: {},\n    // The default `size` or `variant` values\n    defaultProps: {\n        variant:'filled',\n    },\n}\n\nexport const NumberInput = {\n    baseStyle: {\n\n    },\n    // Styles for the size variations\n    sizes: {},\n    // Styles for the visual style variations\n    variants: {},\n    // The default `size` or `variant` values\n    defaultProps: {\n        variant:'filled'\n    },\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ChakraProvider } from '@chakra-ui/react'\nimport { theme } from './theme/theme'\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n    <ChakraProvider theme={theme}>\n      <App />\n    </ChakraProvider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}